# -*- coding: utf-8 -*-
"""Plant Desies

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rxX6u87lTvsjdjbkKVXPNnCD8QuTpEdS
"""

import cv2
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
import os

from google.colab import drive
drive.mount('/content/drive')

#Define Dataset
data_dir = '/content/drive/MyDrive/Day5.python/Plant Desies'
categories = os.listdir(data_dir)

#Load images and Labels
images = []
labels = []

for category in categories:
  # print(category)
  folder_path = os.path.join(data_dir, category)
  for img_file in os.listdir(folder_path):
    img_path = os.path.join(folder_path, img_file)
    img = cv2.imread(img_path)
    if img is not None:
      img = cv2.resize(img, (64,64))
      images.append(img)
      labels.append(category)

 #Convert to numpy arrays
  X = np.array(images)
  y = np.array(labels)

print('labels:', np.unique(y))
print('Data shape', X.shape)

# Count images per class
class_counts = pd.Series(labels).value_counts()
print("class Distribution:")
print(class_counts)

# plot class distribution
import  matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10,6))
sns.barplot(x=class_counts.index, y=class_counts.values)
plt.xticks(rotation=90)
plt.title("Number of Images per Class")
plt.xlabel('Class')
plt.ylabel('Count')
plt.title('Class Distribution')
plt.show()

# Remove corrupted images (if any)
valid_images = []
valid_labels = []

for img, label in zip(X, y):
  if img.shape == (64 ,64,3):
    valid_images.append(img)
    valid_labels.append(label)
X = np.array(valid_images)
y = np.array(valid_labels)

print("Cleaned Data Shape:", X.shape)

# Encode labels
le = LabelEncoder()
y_encoded = le.fit_transform(y)

# Save class names for later use
class_names = le.classes_
print("Class Name:",class_names)



# Show sample images
import random

plt.figure(figsize=(10,10))
for i in range(9):
     idx = random.randint(0, len(X))
     plt.subplot(3,3,i+1)
     plt.imshow(cv2.cvtColor(X[idx], cv2.COLOR_BGR2RGB))
     plt.title(class_names[y_encoded[idx]])
     plt.axis('off')
plt.tight_layout()
plt.show()

"""convert each image into hsv color code"""

def extract_color_histogram(image, bins=(8,8,8)):
  # Convert to HSV color space
  image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
  hist = cv2.calcHist([image], [0,1,2], None, bins, [0,256,0,256,0,256])
  hist = cv2.normalize(hist, hist).flatten()
  return hist

# Extract features
hist_features = [extract_color_histogram(img) for img in X]
X_features = np.array(hist_features)
print("Feature Shape:", X_features.shape)

"""Model Selection: Logistic Regression/SVM"""

# Choose model
#model = LogisticRegression(max_iter=1000)
model = SVC(kernel='rbf',C=10, gamma='scale')

# Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(X_features ,y_encoded, test_size=0.2, random_state=101)

#Train model
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

from  sklearn.metrics import accuracy_score, confusion_matrix, classification_report

#Accuracy
acc = accuracy_score(y_test, y_pred)
print("Accuracy:", acc)

#Confusion Matrix
cm = confusion_matrix(y_test, y_pred)

#plot Confusion Matrix
plt.figure(figsize=(10,8))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# Classification Report
print("Classification Report:")
print(classification_report(y_test, y_pred, target_names=class_names))

